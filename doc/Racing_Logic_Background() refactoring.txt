Racing.Logic.Backgroud()

.к этому методу у меня несколько претензий:
	.при выстреле есть проскок фигур.
	.только нужное количество перерисовка.
	.ошибка в расчёте пройденного расстояния - при полёте пули она считается в 2 раза быстрее.

	.сделать более вменяемую сборку логики:
		.в обычном случае падают фигуры за 1 единицу времени.
		.при наличии пуль - пули взлетают за 0.5 единиц времени.

.что надо?
	.отрисовка на поле:
		._figures.DrowTo(field);
		._car.RenderTo(field);
		._shellEvents.DrowTo(field);

	.проверка пересечений:
		._shellEvents.TestCollition(field); - пуль с препятствиями.
		._car.TestCollision(field); 	-  машинки с препятствиями.

	.движение фигур:
		._shellEvents.FlyUp();	- взлёт пуль.
		._figures.Fall();		- падение фигур.

	.отрисовка на консоль:
		.DrowFig(field);
		._scoreboard.DrowBoard();

	.собственно:
		.Thread.Sleep(500 - TimeService.I / 2);
		+ прерывание цикла по завершению игры.


.а каковы параметры?
	.по делу:
		._shellEvents._shells.Count - наличие взлетающих пуль.
		.gameOver - из _car.TestCollision().
		.TimeService.I - время паузы - целое и половинное => ITimeService.GetTimeout()

	.примеси:
		._gameData.PassesNumber  - сколько проехали.
		._carDecrease.PassNumber - логика уменьшения машинки - отсчёт то отмены эффекта.

	+ дополнительно:
		.часть цикла - если режим взлетающих пуль.


.пули и препятствия движутся на встречу друг другу, как развести их?
	.т.е. исключить ситуацию, когда:
		.в начале пуля была перед препятствием.
		.потом пуля и препятствие сместились на одну позицию.
		.вышло, что пуля оказалась на 2-й позиции препятствия (а может и за его пределами, если препятствие толщиной в 1).

	+ как выглядеть на анимации должно?

	+ как в граничном случае с машинкой будет?
		.т.е. машинка, перед ней препятствие (сразу выше), и тут игрок стреляет.
		.Shell добавляем на том-же уровне что и верхняя часть машинки (Y=14), поэтому что-бы пуля вылетела - её в начале надо сдвинуть вверх.
		+ ещё некоторые уточнения.